library(dplyr)
library(tidyr)
# 1. 파일 불러오기
posterior_summary <- read.table("posterior_summary_lba.txt", header = TRUE, sep = "\t")
posterior_summary$param <- rownames(posterior_summary)
simul_data <- read.table("simul_data_lba_model1.txt", header = TRUE, sep = "\t")
# 2. true 값 정리
true_vals <- simul_data %>%
group_by(subjID) %>%
summarise(
true_d = mean(true_d),
true_A = mean(true_A),
true_tau = mean(true_tau),
true_intercept = mean(true_intercept),
true_slope = mean(true_slope)
)
# 3. posterior 요약값 추출
d_post   <- posterior_summary[grep("^d\\[", posterior_summary$param), ]
A_post   <- posterior_summary[grep("^A\\[", posterior_summary$param), ]
tau_post <- posterior_summary[grep("^tau\\[", posterior_summary$param), ]
int_post <- posterior_summary[grep("^intercept\\[", posterior_summary$param), ]
slope_post <- posterior_summary[grep("^slope\\[", posterior_summary$param), ]
# 4. 파라미터 리커버리 plot
par(mfrow = c(2,2))
plot(true_vals$true_d, d_post$mean, xlab="True d", ylab="Estimated d"); abline(0,1,col="red")
arrows(x0=true_vals$true_d, y0=d_post$mean - d_post$sd, y1=d_post$mean + d_post$sd, length=0.02, angle=90, code=3)
plot(true_vals$true_A, A_post$mean, xlab="True A", ylab="Estimated A"); abline(0,1,col="red")
arrows(x0=true_vals$true_A, y0=A_post$mean - A_post$sd, y1=A_post$mean + A_post$sd, length=0.02, angle=90, code=3)
plot(true_vals$true_tau, tau_post$mean, xlab="True tau", ylab="Estimated tau"); abline(0,1,col="red")
arrows(x0=true_vals$true_tau, y0=tau_post$mean - tau_post$sd, y1=tau_post$mean + tau_post$sd, length=0.02, angle=90, code=3)
plot(true_vals$true_intercept, int_post$mean, xlab="True intercept", ylab="Estimated intercept"); abline(0,1,col="red")
arrows(x0=true_vals$true_intercept, y0=int_post$mean - int_post$sd, y1=int_post$mean + int_post$sd, length=0.02, angle=90, code=3)
# 5. slope 리커버리
plot(true_vals$true_slope, slope_post$mean,
xlab = "True slope", ylab = "Estimated slope", xlim = c(0, 0.2), ylim = c(0, 0.2))
abline(0, 1, col = "red")
arrows(x0 = true_vals$true_slope, y0 = slope_post$mean - slope_post$sd,
y1 = slope_post$mean + slope_post$sd, length=0.02, angle=90, code=3)
# 6. y_pred 불러오기
y_pred_post <- posterior_summary[grep("^y_pred\\[", posterior_summary$param), ]
extract_index <- function(x) {
x <- gsub("y_pred\\[|\\]", "", x)
as.integer(strsplit(x, ",")[[1]])
}
indices <- t(sapply(y_pred_post$param, extract_index))
y_pred_post$subj <- indices[,1]
y_pred_post$trial <- indices[,2]
# 7. 매트릭스로 변환
y_pred_matrix <- pivot_wider(y_pred_post[, c("subj", "trial", "mean")],
names_from = trial,
values_from = mean) %>%
dplyr::select(-subj) %>%
as.matrix()
# 8. True RT 매트릭스
RT_matrix <- matrix(simul_data$RT, nrow = 42, ncol = 100, byrow = TRUE)
# 9. Posterior Predictive Check
plot(as.vector(RT_matrix), as.vector(y_pred_matrix),
xlab = "True RT", ylab = "Predicted RT", main = "Posterior Predictive Check")
abline(0, 1, col = "red")
cat("correlation (RT vs y_pred):", cor(as.vector(RT_matrix), as.vector(y_pred_matrix)), "\n")
# 6. y_pred 불러오기
y_pred_post <- posterior_summary[grep("^y_pred\\[", posterior_summary$param), ]
extract_index <- function(x) {
x <- gsub("y_pred\\[|\\]", "", x)
as.integer(strsplit(x, ",")[[1]])
}
indices <- t(sapply(y_pred_post$param, extract_index))
y_pred_post$subj <- indices[,1]
y_pred_post$trial <- indices[,2]
# 7. 매트릭스로 변환
y_pred_matrix <- pivot_wider(y_pred_post[, c("subj", "trial", "mean")],
names_from = trial,
values_from = mean) %>%
dplyr::select(-subj) %>%
as.matrix()
# 8. True RT 매트릭스
RT_matrix <- matrix(simul_data$RT, nrow = 42, ncol = 100, byrow = TRUE)
# 9. Posterior Predictive Check
plot(as.vector(RT_matrix), as.vector(y_pred_matrix),
xlab = "True RT", ylab = "Predicted RT", main = "Posterior Predictive Check")
abline(0, 1, col = "red")
cat("correlation (RT vs y_pred):", cor(as.vector(RT_matrix), as.vector(y_pred_matrix)), "\n")
# 9. Posterior Predictive Check
plot(as.vector(RT_matrix), as.vector(y_pred_matrix),
xlab = "True RT", ylab = "Predicted RT", main = "Posterior Predictive Check")
abline(0, 1, col = "red")
cat("correlation (RT vs y_pred):", cor(as.vector(RT_matrix), as.vector(y_pred_matrix)), "\n")
# 0. 준비
library(dplyr)
library(tidyr)
# 1. 파일 불러오기
posterior_summary <- read.table("posterior_summary_lba.txt", header = TRUE, sep = "\t")
posterior_summary$param <- rownames(posterior_summary)
simul_data <- read.table("simul_data_lba_model1.txt", header = TRUE, sep = "\t")
# 2. true 값 요약
true_vals <- simul_data %>%
group_by(subjID) %>%
summarise(
true_d         = mean(true_d),
true_A         = mean(true_A),
true_tau       = mean(true_tau),
true_intercept = mean(true_intercept),
true_slope     = mean(true_slope)
)
# 3. posterior 값 추출
get_param <- function(name) {
posterior_summary[grep(paste0("^", name, "\\["), posterior_summary$param), ]
}
d_post     <- get_param("d")
A_post     <- get_param("A")
tau_post   <- get_param("tau")
int_post   <- get_param("intercept")
slope_post <- get_param("slope")
# 4. 파라미터 리커버리 플롯
par(mfrow = c(2,3))  # 5개 + PPC 1개
recovery_plot <- function(true, est, name) {
plot(true, est$mean, xlab = paste("True", name), ylab = paste("Estimated", name))
abline(0,1,col="red")
arrows(x0 = true, y0 = est$mean - est$sd, y1 = est$mean + est$sd, length = 0.02, angle = 90, code = 3)
}
recovery_plot(true_vals$true_d,         d_post,   "d")
recovery_plot(true_vals$true_A,         A_post,   "A")
recovery_plot(true_vals$true_tau,       tau_post, "tau")
recovery_plot(true_vals$true_intercept, int_post, "intercept")
recovery_plot(true_vals$true_slope,     slope_post, "slope")
# 5. y_pred 추출
ypred_post <- posterior_summary[grep("^y_pred\\[", posterior_summary$param), ]
extract_idx <- function(x) as.integer(strsplit(gsub("y_pred\\[|\\]", "", x), ",")[[1]])
idx_matrix <- t(sapply(ypred_post$param, extract_idx))
ypred_post$subj <- idx_matrix[,1]
ypred_post$trial <- idx_matrix[,2]
# 6. y_pred 평균 매트릭스 만들기
y_pred_matrix <- pivot_wider(ypred_post[, c("subj", "trial", "mean")],
names_from = trial,
values_from = mean) %>%
arrange(subj) %>%
dplyr::select(-subj) %>%
as.matrix()
# 7. RT 매트릭스 만들기
N <- length(unique(simul_data$subjID))
Max_tr <- nrow(simul_data) / N
RT_matrix <- matrix(simul_data$RT, nrow = N, ncol = Max_tr, byrow = TRUE)
# 8. Posterior Predictive Check
plot(as.vector(RT_matrix), as.vector(y_pred_matrix),
xlab = "True RT", ylab = "Predicted RT", main = "PPC: RT vs y_pred")
abline(0, 1, col = "red")
cat("Correlation (RT vs y_pred):", cor(as.vector(RT_matrix), as.vector(y_pred_matrix)), "\n")
# --- 0. 설정 ---
set.seed(2025)
N <- 42
Max_tr <- 100
s <- 1.0
library(dplyr)
# --- 1. posterior summary 불러오기 ---
posterior_summary <- read.table("posterior_summary_lba.txt", header = TRUE, sep = "\t")
posterior_summary$param <- rownames(posterior_summary)
# --- 2. 파라미터별 추출 및 true 파라미터 샘플링 ---
get_param_samples <- function(name) {
df <- posterior_summary[grep(paste0("^", name, "\\["), posterior_summary$param), ]
rnorm(N, mean = df$mean, sd = df$sd)
}
simul_pars <- data.frame(
subjID    = 1:N,
d         = get_param_samples("d"),
A         = get_param_samples("A"),
tau       = get_param_samples("tau"),
intercept = get_param_samples("intercept"),
slope     = get_param_samples("slope")
)
simul_pars$b <- simul_pars$A + simul_pars$d
# --- 3. 시뮬레이션 수행 ---
all_data <- NULL
for (i in 1:N) {
subtlex_i  <- rnorm(Max_tr, 0, 1)
stimtype_i <- sample(1:2, Max_tr, replace = TRUE)
v_trial    <- matrix(NA, Max_tr, 2)
for (t in 1:Max_tr) {
v_t <- simul_pars$intercept[i] + simul_pars$slope[i] * subtlex_i[t]
if (stimtype_i[t] == 1) {
v_trial[t, 1] <- v_t
v_trial[t, 2] <- 1.0
} else {
v_trial[t, 2] <- v_t
v_trial[t, 1] <- 1.0
}
}
start <- matrix(runif(2 * Max_tr, 0, simul_pars$A[i]), ncol = 2)
drift <- matrix(rnorm(2 * Max_tr, mean = as.vector(v_trial), sd = s), ncol = 2)
ttf   <- (simul_pars$b[i] - start) / drift
ttf[drift <= 0] <- Inf
RT <- apply(ttf, 1, min) + simul_pars$tau[i]
tmp <- data.frame(
subjID         = rep(i, Max_tr),
trial          = 1:Max_tr,
RT             = RT,
stimulus_type  = stimtype_i,
subtlex        = subtlex_i
)
all_data <- rbind(all_data, tmp)
}
# --- 4. 저장 ---
write.table(all_data, file = "simul_data_lba_model1.txt",
row.names = FALSE, col.names = TRUE, sep = "\t")
write.table(simul_pars, file = "simul_pars_lba_model1.txt",
row.names = FALSE, col.names = TRUE, sep = "\t")
# --- 0. 환경 준비 ---
set.seed(2025)
library(dplyr)
# --- 1. 시뮬레이션 설정 ---
num_subjs  <- 42
num_trials <- 100
s <- 1.0  # standard deviation of drift rate
# --- 2. posterior summary 불러오기 ---
posterior_summary <- read.table("posterior_summary_lba.txt", header = TRUE, sep = "\t")
posterior_summary$param <- rownames(posterior_summary)
# --- 3. 파라미터별 추출 함수 ---
get_param_samples <- function(name, N) {
post <- posterior_summary[grep(paste0("^", name, "\\["), posterior_summary$param), ]
rnorm(N, mean = post$mean, sd = post$sd)
}
# --- 4. 참가자별 true 파라미터 샘플링 ---
simul_pars <- data.frame(
subjID    = 1:num_subjs,
d         = get_param_samples("d", num_subjs),
A         = get_param_samples("A", num_subjs),
tau       = get_param_samples("tau", num_subjs),
intercept = get_param_samples("intercept", num_subjs),
slope     = get_param_samples("slope", num_subjs)
)
simul_pars$b <- simul_pars$A + simul_pars$d
# --- 5. 시뮬레이션 루프 시작 ---
all_data <- NULL
for (i in 1:num_subjs) {
subtlex_i  <- rnorm(num_trials, 0, 1)
stimtype_i <- sample(1:2, num_trials, replace = TRUE)
v_trial    <- matrix(NA, num_trials, 2)
for (t in 1:num_trials) {
v_t <- simul_pars$intercept[i] + simul_pars$slope[i] * subtlex_i[t]
if (stimtype_i[t] == 1) {
v_trial[t, 1] <- v_t
v_trial[t, 2] <- 1.0
} else {
v_trial[t, 2] <- v_t
v_trial[t, 1] <- 1.0
}
}
start <- matrix(runif(2 * num_trials, 0, simul_pars$A[i]), ncol = 2)
drift <- matrix(rnorm(2 * num_trials, mean = as.vector(v_trial), sd = s), ncol = 2)
ttf   <- (simul_pars$b[i] - start) / drift
ttf[drift <= 0] <- Inf
RT <- apply(ttf, 1, min) + simul_pars$tau[i]
choice <- apply(ttf, 1, which.min)
tmp <- data.frame(
subjID         = rep(i, num_trials),
trial          = 1:num_trials,
choice         = choice,
RT             = RT,
stimulus_type  = stimtype_i,
subtlex        = subtlex_i,
true_d         = rep(simul_pars$d[i], num_trials),
true_A         = rep(simul_pars$A[i], num_trials),
true_tau       = rep(simul_pars$tau[i], num_trials),
true_intercept = rep(simul_pars$intercept[i], num_trials),
true_slope     = rep(simul_pars$slope[i], num_trials)
)
all_data <- rbind(all_data, tmp)
}
# --- 6. 저장 ---
write.table(all_data, file = "simul_data_lba_model1.txt",
row.names = FALSE, col.names = TRUE, sep = "\t")
#rm(list=ls())
# Simulation parameters
seed <- 2025    # do not change the seed number!
num_subjs  <- 30 # number of subjects
num_trials <- 300 # number of trials per subject
pr_correct_option1 <- 0.5  # reward probability in option 1
pr_correct_option2 <- 0.8  # reward probability in option 2
# Set seed
set.seed(seed)   # always set a seed number for this homework!
# True parameters
simul_pars <- data.frame(alpha = rnorm(num_subjs, 0.20, 0.08),
beta = rnorm(num_subjs, 2.00, 0.70),
subjID  = 1:num_subjs)
# For storing simulated choice data for all subjects
all_data <- NULL
for (i in 1:num_subjs) {
# Individual-level (i.e. per subject) parameter values
alpha <- simul_pars$alpha[i]
beta <- simul_pars$beta[i]
# geneate payoff structure for each subject
# Defaults for the two options
# option 1: 50% win (+1), 50% loss (-1)
# option 2: 80% win (+1), 20% loss (-1)
payoff_option1 = rbinom(size=1, n = num_trials, prob = pr_correct_option1)
payoff_option2 = rbinom(size=1, n = num_trials, prob = pr_correct_option2)
# Replace 0 with -1
payoff_option1[payoff_option1 == 0] = -1   # if 0 --> replace it with -1
payoff_option2[payoff_option2 == 0] = -1   # if 0 --> replace it with -1
payoff_both = data.frame(payoff_option1, payoff_option2)
# For storing simulated data for current subject
# subjID = subject ID
# trial = trial number
# choice = choice made on each trial (1 or 2)
# outcome = outcome reveived on each trial (1 or -1)
tmp_data = data.frame( subjID=NULL, trial=NULL, choice=NULL, outcome=NULL)
# initialize some variables
sv = c(0, 0)  # stimulus value of two options
for (t in 1:num_trials)  {
# Prob of choosing option 2
prob_choose2 = 1 / (1 + exp(beta * (sv[1] - sv[2])))  # exploration/exploitation parameter is set to 1
# choice
choice = rbinom(size=1, n = 1, prob = prob_choose2 )
choice = choice + 1  # 0 or 1 --> 1 (option 1) or 2 (option 2)
# outcome
outcome = payoff_both[t, choice]
# after receiving outcome (feedback), update sv[t+1]
# prediction error (PE)
PE = outcome - sv[choice]
# update stimulus value (sv) of the chosen option
sv[choice] = sv[choice] + alpha * (outcome - sv[choice] )
# append simulated task/response to subject data
tmp_data[t, "subjID"] = i
tmp_data[t, "trial"] = t
tmp_data[t, "choice"] = choice
tmp_data[t, "outcome"]    = outcome
} # end of t loop
# Append current subject with all subjects' data
all_data = rbind(all_data, tmp_data)
}
# Write out data
write.table(all_data, file = "simul_data_hw7_model1.txt", row.names = F, col.names = T, sep = "\t")
# --- 0. 환경 준비 ---
set.seed(2025)
library(dplyr)
# --- 1. 시뮬레이션 설정 ---
N <- 42
Max_tr <- 100
s <- 1.0  # drift rate noise
# --- 2. posterior summary 불러오기 ---
posterior_summary <- read.table("posterior_summary_lba.txt", header = TRUE, sep = "\t")
posterior_summary$param <- rownames(posterior_summary)
# --- 3. 파라미터별 posteriors 추출 ---
extract_post <- function(name) {
posterior_summary[grep(paste0("^", name, "\\["), posterior_summary$param), ]
}
d_post     <- extract_post("d")
A_post     <- extract_post("A")
tau_post   <- extract_post("tau")
int_post   <- extract_post("intercept")
slope_post <- extract_post("slope")
# --- 4. 시뮬레이션 수행 ---
all_data <- NULL
for (i in 1:N) {
# 개별 파라미터 샘플링
d         <- rnorm(1, mean = d_post$mean[i],     sd = d_post$sd[i])
A         <- rnorm(1, mean = A_post$mean[i],     sd = A_post$sd[i])
tau       <- rnorm(1, mean = tau_post$mean[i],   sd = tau_post$sd[i])
intercept <- rnorm(1, mean = int_post$mean[i],   sd = int_post$sd[i])
slope     <- rnorm(1, mean = slope_post$mean[i], sd = slope_post$sd[i])
b         <- A + d
# 자극값 생성
subtlex_i  <- rnorm(Max_tr, 0, 1)
stimtype_i <- sample(1:2, Max_tr, replace = TRUE)
v_trial    <- matrix(NA, Max_tr, 2)
for (t in 1:Max_tr) {
v_t <- intercept + slope * subtlex_i[t]
if (stimtype_i[t] == 1) {
v_trial[t, 1] <- v_t
v_trial[t, 2] <- 1.0
} else {
v_trial[t, 2] <- v_t
v_trial[t, 1] <- 1.0
}
}
# RT 생성
start <- matrix(runif(2 * Max_tr, 0, A), ncol = 2)
drift <- matrix(rnorm(2 * Max_tr, mean = as.vector(v_trial), sd = s), ncol = 2)
ttf   <- (b - start) / drift
ttf[drift <= 0] <- Inf
RT     <- apply(ttf, 1, min) + tau
choice <- apply(ttf, 1, which.min)
# trial-level 데이터 저장
tmp <- data.frame(
subjID         = rep(i, Max_tr),
trial          = 1:Max_tr,
choice         = choice,
RT             = RT,
stimulus_type  = stimtype_i,
subtlex        = subtlex_i,
true_d         = rep(d, Max_tr),
true_A         = rep(A, Max_tr),
true_tau       = rep(tau, Max_tr),
true_intercept = rep(intercept, Max_tr),
true_slope     = rep(slope, Max_tr)
)
all_data <- rbind(all_data, tmp)
}
# --- 5. 파일 저장 ---
write.table(all_data, file = "simul_data_lba_model1.txt",
row.names = FALSE, col.names = TRUE, sep = "\t")
# --- 0. 환경 준비 ---
library(rstan)
library(dplyr)
# --- 1. 데이터 불러오기 ---
dat <- read.table("simul_data_lba_model1.txt", header = TRUE, sep = "\t")
# --- 2. 기본 정보 설정 ---
allSubjs <- unique(dat$subjID)
N <- length(allSubjs)
Max_tr <- max(table(dat$subjID))
minRT <- tapply(dat$RT, dat$subjID, min)
# --- 3. 데이터 배열 구성 ---
RT         <- array(NA, dim = c(N, Max_tr))
choice     <- array(NA, dim = c(N, Max_tr))
stim_type  <- array(NA, dim = c(N, Max_tr))
subtlex    <- array(NA, dim = c(N, Max_tr))
N_tr_cond  <- rep(Max_tr, N)
for (i in 1:N) {
tmp <- subset(dat, subjID == allSubjs[i])
RT[i, 1:Max_tr]        <- tmp$RT
choice[i, 1:Max_tr]    <- tmp$choice
stim_type[i, 1:Max_tr] <- tmp$stimulus_type
subtlex[i, 1:Max_tr]   <- tmp$subtlex
}
# --- 4. Stan 데이터 리스트 구성 ---
dataList <- list(
N = N,
Max_tr = Max_tr,
N_choices = 2,
N_tr_cond = N_tr_cond,
RT = RT,
choice = choice,
stimulus_type = stim_type,
subtlex = subtlex,
minRT = as.numeric(minRT)
)
# --- 5. 모델 실행 ---
fit <- stan(
file = "LBA_word_hier.stan",
data = dataList,
iter = 2000,
warmup = 1000,
chains = 2,
cores = 2,
pars = c("d", "A", "tau", "intercept", "slope", "y_pred")
)
# --- 0. 환경 준비 ---
library(rstan)
library(dplyr)
# --- 1. 데이터 불러오기 ---
dat <- read.table("simul_data_lba_model1.txt", header = TRUE, sep = "\t")
# --- 2. 기본 정보 설정 ---
allSubjs <- unique(dat$subjID)
N <- length(allSubjs)
Max_tr <- max(table(dat$subjID))
minRT <- tapply(dat$RT, dat$subjID, min)
# --- 3. 데이터 배열 구성 ---
RT         <- array(NA, dim = c(N, Max_tr))
choice     <- array(NA, dim = c(N, Max_tr))
stim_type  <- array(NA, dim = c(N, Max_tr))
subtlex    <- array(NA, dim = c(N, Max_tr))
N_tr_cond  <- rep(Max_tr, N)
for (i in 1:N) {
tmp <- subset(dat, subjID == allSubjs[i])
RT[i, 1:Max_tr]        <- tmp$RT
choice[i, 1:Max_tr]    <- tmp$choice
stim_type[i, 1:Max_tr] <- tmp$stimulus_type
subtlex[i, 1:Max_tr]   <- tmp$subtlex
}
# --- 4. Stan 데이터 리스트 구성 ---
dataList <- list(
N = N,
Max_tr = Max_tr,
N_choices = 2,
N_tr_cond = N_tr_cond,
RT = RT,
choice = choice,
stimulus_type = stim_type,
subtlex = subtlex,
minRT = as.numeric(minRT)
)
init_fn <- function() {
list(
mu_int = rnorm(1, 3.19, 0.01),
sigma_int = runif(1, 0.55, 0.60),
mu_A = rnorm(1, 0.34, 0.01),
sigma_A = runif(1, 0.20, 0.25),
mu_d = rnorm(1, 0.41, 0.01),
sigma_d = runif(1, 0.68, 0.73),
mu_tau = rnorm(1, 0.01, 0.001),
sigma_tau = runif(1, 0.31, 0.33),
mu_slope = rnorm(1, 0.11, 0.01),
sigma_slope = runif(1, 0.04, 0.06),
A_raw = rnorm(N, 0, 0.05),
d_raw = rnorm(N, 0, 0.05),
tau_raw = rnorm(N, 0, 0.05),
intercept_raw = rnorm(N, 0, 0.05),
slope_raw = rnorm(N, 0, 0.05)
)
}
# --- 5. 모델 실행 ---
fit <- stan(
file = "LBA_word_hier.stan",
data   = dataList,
init   = init_fn,
iter   = 2000,
warmup = 1000,
chains = 4,
cores  = 4,
control = list(adapt_delta = 0.95, max_treedepth = 14),
refresh = 50,
pars = c("d", "A", "tau", "intercept", "slope", "y_pred")
)
