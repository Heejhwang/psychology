functions {
  real lba_pdf(real t, real b, real A, real v, real s) {
    real z1 = (b - A - t * v) / (t * s);
    real z2 = (b - t * v) / (t * s);
    return (1 / A) * (-v * Phi(z1) + s * exp(normal_lpdf(z1 | 0, 1))
                      + v * Phi(z2) - s * exp(normal_lpdf(z2 | 0, 1)));
  }

  real lba_cdf(real t, real b, real A, real v, real s) {
    real z1 = b - A - t * v;
    real z2 = b - t * v;
    real ts = t * s;
    return 1 + (z1 / A) * Phi(z1 / ts) - (z2 / A) * Phi(z2 / ts) +
           (ts / A) * (exp(normal_lpdf(z1 / ts | 0, 1)) - exp(normal_lpdf(z2 / ts | 0, 1)));
  }

  real lba_loglik(real rt, int choice, vector v, real k, real A, real s, real psi) {
    real t = rt - psi;
    real b = A + k;
    real pdf;
    real cdf_prod = 1;

    if (t <= 0) return negative_infinity();

    pdf = lba_pdf(t, b, A, v[choice], s);

    for (i in 1:num_elements(v)) {
      if (i != choice) {
        cdf_prod *= (1 - lba_cdf(t, b, A, v[i], s));
      }
    }

    return log(pdf * cdf_prod + 1e-10);  // prevent underflow
  }
}

data {
  int<lower=1> N;
  int<lower=1> T;
  int<lower=1> Tsubj[N];
  real RT[N, T];
  int<lower=1, upper=2> choice[N, T];
  int<lower=1, upper=2> target_cat[N, T]; 
  real subtlex[N, T];
  real greene[N, T];
  real minRT[N];
  real<lower=0> RTbound;
}

parameters {
  vector[6] mu_pr;  // A, k, psi, intercept, subtlex_slope, greene_slope
  vector<lower=0>[6] sigma;

  vector[N] A_pr;
  vector[N] k_pr;
  vector[N] psi_pr;
  vector[N] d1_intercept_pr;
  vector[N] d1_slope_pr;
  vector[N] d2_slope_pr;
}

transformed parameters {
  vector<lower=0>[N] A;
  vector<lower=0>[N] k;
  vector<lower=RTbound, upper=max(minRT)>[N] psi;

  vector[N] d1_intercept;
  vector[N] d1_slope;
  vector[N] d2_slope;

  matrix[N, T] drift_subtlex_greene;

  for (i in 1:N) {
    A[i]  = exp(mu_pr[1] + sigma[1] * A_pr[i]);
    k[i]  = exp(mu_pr[2] + sigma[2] * k_pr[i]);
    psi[i] = Phi_approx(mu_pr[3] + sigma[3] * psi_pr[i]) * (minRT[i] - RTbound) + RTbound;

    d1_intercept[i] = fmax(mu_pr[4] + sigma[4] * d1_intercept_pr[i], 0.001);
    d1_slope[i]     = mu_pr[5] + sigma[5] * d1_slope_pr[i];
    d2_slope[i]     = mu_pr[6] + sigma[6] * d2_slope_pr[i];

    for (t in 1:Tsubj[i]) {
      drift_subtlex_greene[i, t] = d1_intercept[i]
      + d1_slope[i] * subtlex[i, t]
      + d2_slope[i]*greene;
    }
  }
}

model {
  mu_pr ~ normal(0, 1);
  sigma ~ normal(0, 0.2);

  A_pr ~ normal(0, 1);
  k_pr ~ normal(0, 1);
  psi_pr ~ normal(0, 1);
  d1_intercept_pr ~ normal(0, 1)T[0,];
  d1_slope_pr ~ normal(0, 1);
  d2_slope_pr ~ normal(0, 1);

  for (i in 1:N) {
    for (t in 1:Tsubj[i]) {
      real v_nat;
      real v_art;
      real rt = RT[i, t];
      int ch = choice[i, t];

      if (target_cat[i, t] == 1) {
        v_nat = drift_subtlex_greene[i, t];
        v_art = 1.0;
      } else {
        v_nat = 1.0;
        v_art = drift_subtlex_greene[i, t];
      }
      vector[2] drift_vec = [v_nat, v_art]';
      target += lba_loglik(rt, ch, drift_vec, k[i], A[i], 1.0, psi[i]);
    }
  }
}

generated quantities {
  matrix[N, T] drift_subtlex_greene_output;
  matrix[N, T] log_lik;
  for (i in 1:N) {
    for (t in 1:Tsubj[i]) {
      real v_nat;
      real v_art;
      real rt = RT[i, t];
      if (target_cat[i, t] == 1) {
        v_nat = drift_subtlex_greene[i, t];
        v_art = 1.0;
      } else {
        v_nat = 1.0;
        v_art = drift_subtlex_greene[i, t];
      }
      vector[2] drift_vec = [v_nat, v_art]';
      log_lik[i, t] = lba_loglik(rt, choice[i, t], drift_vec, k[i], A[i], 1.0, psi[i]);
      drift_subtlex_greene_output[i, t] = drift_subtlex_greene[i, t];
    }
    for (t in (Tsubj[i] + 1):T) {
      log_lik[i, t] = 0;
      drift_subtlex_greene_output[i, t] = -999;
    }
  }
}
